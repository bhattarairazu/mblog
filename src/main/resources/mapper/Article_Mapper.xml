<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.msidolphin.mblog.model.mapper.ArticleMapper">

    <resultMap id="BaseResultMap" type="pers.msidolphin.mblog.object.dto.ArticleDto" >
        <id     property="id"           column="id"            jdbcType="INTEGER" javaType="java.lang.String" />
        <result property="title"        column="title"         jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="content"      column="content"       jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="typeCode"     column="type"          jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result property="summary"      column="summary"       jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="thumbnail"    column="thumbnail"     jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="author"       column="user_name"     jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="views"        column="views"         jdbcType="INTEGER" javaType="java.lang.Integer" />
        <result property="commentCount" column="comment_count" jdbcType="INTEGER" javaType="java.lang.Integer" />
        <result property="createTime"   column="create_time"   jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="updateTime"   column="update_time"   jdbcType="VARCHAR" javaType="java.lang.String" />
    </resultMap>

    <select id="findArticles" parameterType="pers.msidolphin.mblog.object.query.ArticleQuery" resultMap="BaseResultMap">
        SELECT
        a.id id,
        a.content,
        a.type,
        a.views,
        a.title title,
        a.thumbnail,
        a.summary,
        (select u.nickname from user u where u.id = a.creator) user_name,
        (SELECT count(0) cnum FROM comment c WHERE c.article_id = a.id) comment_count,
        DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i:%s') create_time,
        DATE_FORMAT(a.update_time,'%Y-%m-%d %H:%i:%s') update_time
        FROM article a WHERE 1 = 1
            <if test="title != null">
                AND a.title LIKE #{title}
            </if>
            <if test="startTime != null">
                AND a.create_time <![CDATA[ >= ]]> #{startTime}
            </if>
            <if test="endTime != null">
                AND a.create_time <![CDATA[ <= ]]> #{endTime}
            </if>
            <if test="isDelete != null">
                AND a.is_delete = #{isDelete}
            </if>
            <if test="tags != null">
                <!--<foreach collection="tagList" item="tag" >-->
                    <!--AND find_in_set(#{tag}, a.tags)-->
                <!--</foreach>-->
                <!-- 表结构改变了，那么标签查询条件t也应有所不同 -->
                <foreach collection="tagIdList" item="id">
                    AND EXISTS(SELECT t.id FROM tags t INNER JOIN article_tag at on t.id = at.tid WHERE t.id = #{id} and at.aid = a.id)
                </foreach>
            </if>
            <if test="id != null">
                AND a.id = #{id}
            </if>
    </select>
    
    <update id="updateByArticleId" parameterType="pers.msidolphin.mblog.object.dto.AdminArticleDto">
        UPDATE article
          <set>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="summary != null">
                summary = #{summary},
            </if>
            <if test="thumbnail != null">
                thumbnail = #{thumbnail},
            </if>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="type != null">
                type = #{type},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete},
            </if>
              update_time = now(),
              updator = #{updator}
          </set>
            WHERE id = #{articleId}
    </update>

    <!-- 文章按月统计 选择具体的某一年进行统计 统计12个月份 -->
    <select id="monthlyReport" parameterType="list" resultType="map">
        SELECT
            <foreach collection="list" item="item" index="index">
                SUM(CASE month(a.create_time) when ${item} then 1 else 0 end) `${item}`,
            </foreach>
            a.type
        FROM article a WHERE year(a.create_time) = #{year}
        GROUP BY a.type ORDER BY a.type ASC
    </select>
    
    <!-- 文章按年统计 传入start end 开始结束年份 list为年份字符串 -->
    <select id="yearReport" parameterType="list" resultType="map">
        SELECT
        <foreach collection="list" item="item">
            SUM(CASE year(a.create_time) when ${item} then 1 else 0 end) `${item}`,
        </foreach>
        a.type
        FROM article a WHERE year(a.create_time) <![CDATA[ >= ]]> #{start} AND year(a.create_time) <![CDATA[ <= ]]> #{end}
        GROUP BY a.type ORDER BY a.type ASC
    </select>

    <!-- 统计文章类型 -->
    <select id="pieReport" resultType="map">
        SELECT a.type, count(0) count
        FROM article a GROUP BY a.type
    </select>

    <!-- 统计文章数量 -->
    <select id="selectArticleCount" resultType="int">
      SELECT COUNT(0) FROM article a WHERE a.is_delete = '0'
    </select>
    
    <!-- 获取文章评论和回复总数 -->
    <select id="selectArtcileCommentAndReplyCount" resultType="integer" parameterType="string">
        SELECT SUM((SELECT count(*) + 1 FROM replies r WHERE r.comment_id = c.id and r.status = 1)) count FROM comment c
        WHERE c.article_id = #{id} and c.status = 1
    </select>

    <select id="selectHotArticles" resultType="map">
        SELECT * FROM
            (
                SELECT a.title  -- 文章标题
                    ,a.create_time
                    , a.views  -- 文章阅览数
                    , (SELECT
                           IFNULL(
                                   SUM((SELECT count(0) + 1 FROM replies r WHERE r.comment_id = c.id and r.status = 1)), 0) AS count
                       FROM comment c WHERE c.article_id = a.id and c.status = 1
                      ) AS replies -- 文章评论数
                    ,a.vote as votes  -- 文章点赞数
                FROM article a
                ORDER BY views, replies, vote LIMIT 0,10
            ) t
        ORDER BY t.create_time DESC
    </select>
</mapper>